%language "C++"
%defines
%locations
%define parser_class_name {marco}
// %define api.parser.class {rcc}
/* TODO: garbage colllection */
%{
#include <cctype>
#include <string>
// #include "AST.hpp"
#include "RccGlobal.hpp"
#include "marco.tab.hpp"
#define yylex(...) marcolex(__VA_ARGS__)
using namespace std;
extern int yylex(yy::marco::semantic_type *yylval, yy::marco::location_type *yylloc, RccGlobal &global);
#include "marco.hpp"
%}

%parse-param {RccGlobal &global}
%lex-param {RccGlobal &global}
%initial-action {
	@$.begin.filename=@$.end.filename=(global.in=="")?new std::string("stdin"):&global.in;
}
%union {
	std::string *marco_name;
}

%token DEFINE IFDEF IFNDEF ELSE ENDIF

%token<marco_name> IDENTIFIER OTHER
%type<marco_name> token tokens
%start program
%%

program
	: block;
block
	: atom
	| block '\n' atom
	;

atom
	: if_block
	| define_line
	| normal_line
	;
normal_line
	: tokens 	 	{delete $1;}
	| 
	;
tokens
	: token       	{$$=$1;}
	| tokens token	{$$=new std::string(*$1+" "+*$2);delete $1;delete $2;}
	;
token
	: IDENTIFIER	{LOG("identifier: %s\n",$1->data());$$=$1;REPLACE($1); }
	| ELSE			{if(!mute)fprintf(out,"else");$$=new std::string("else");}
	| OTHER			{LOG("other token :%s\n",$1->data());if(!mute)fprintf(out,"%s",$1->data());$$=$1;}
	; 
if_block
	: IF IDENTIFIER '\n' block '#' ENDIF 
	| IF IDENTIFIER '\n' block '#' ELSE '\n' block '#' ENDIF 
	;
IF 
	: IFDEF
	| IFNDEF
	;

define_line 
	: '#' DEFINE IDENTIFIER {mute=true;} tokens 		{LOG("DEFINED identifier %s\n",$3->data());INSERT_MARCO($3,$5);mute=false;}
	;
%%
namespace yy
{
	void marco::error(location const &loc, const string &s){
		printf("\n\e[1m%s:%d:%d: \e[0m",loc.begin.filename->data(),loc.begin.line,loc.end.line);
		printf("\e[31;40m\e[1merror: \e[0m%s\n", "marco instruction not recongnized");
	}
}


