%language "C++"
%defines
%locations
%define parser_class_name "rcc"
%{
#include <cctype>
#include <string>
#include "rccGlobal.hpp"
#include "AST.hpp"
#define YYSTYPE struct PrototypeAST *
#include "rcc.tab.hpp"
using namespace std;
extern int yylex(struct PrototypeAST **yylval,yy::rcc::location_type *yylloc,rccGlobal &global);

static StructAST *selfDefinedType;
static string assignOp="=";
%}
%parse-param {rccGlobal &global}
%lex-param {rccGlobal &global}
/* %initial-action {
	@$.begin.filename=@$.end.filename=new std::string("stdin");
} */
%token IDENTIFIER CONSTANT STRING_LITERAL SIZEOF
%token PTR_OP INC_OP DEC_OP LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP
%token AND_OP OR_OP MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token SUB_ASSIGN LEFT_ASSIGN RIGHT_ASSIGN AND_ASSIGN
%token XOR_ASSIGN OR_ASSIGN TYPE_NAME

%token TYPEDEF EXTERN STATIC AUTO REGISTER
%token CHAR SHORT INT LONG SIGNED UNSIGNED FLOAT DOUBLE CONST VOLATILE VOID
%token STRUCT UNION ENUM ELLIPSIS

%token CASE DEFAULT IF ELSE SWITCH WHILE DO FOR GOTO CONTINUE BREAK RETURN

%start translation_unit
%%

primary_expression
	: IDENTIFIER        								{$$=new VarAST(global.buf.val.u8);}
	| CONSTANT          								{$$=new LiteralAST(global);}
	| STRING_LITERAL    								{$$=new LiteralAST(global);}
	| '(' expression ')'								{$$=$2;}
	;

postfix_expression
	: primary_expression                                 {$$=$1;}
	| postfix_expression '[' expression ']'              {$$=$1;}
	| postfix_expression '(' ')'                         {$$=new CallExprAST($1->op);}
	| postfix_expression '(' argument_expression_list ')'{$$=new CallExprAST($1->op,dynamic_cast<ExprAST*>($3));}
	| postfix_expression '.' IDENTIFIER                  {$$=$1;}
	| postfix_expression PTR_OP IDENTIFIER               {$$=$1;}
	| postfix_expression INC_OP                          {$$=$1;}
	| postfix_expression DEC_OP                          {$$=$1;}
	;

argument_expression_list
	: assignment_expression
	| argument_expression_list ',' assignment_expression{$$=$1;dynamic_cast<ExprAST*>($1)->next=dynamic_cast<ExprAST*>($3);}
	;

unary_expression
	: postfix_expression            					{$$=$1;}
	| INC_OP unary_expression       					{$$=$2;}
	| DEC_OP unary_expression       					{$$=$2;}
	| unary_operator cast_expression					{$$=$2;}
	| SIZEOF unary_expression       					{$$=$2;}
	| SIZEOF '(' type_name ')'      					{$$=$3;}
	;

unary_operator
	: '&'
	| '*'
	| '+'
	| '-'
	| '~'
	| '!'
	;

cast_expression
	: unary_expression                 					{$$=$1;}
	| '(' type_name ')' cast_expression					{$$=$4;}
	;

multiplicative_expression
	: cast_expression									{$$=$1;}
	| multiplicative_expression '*' cast_expression		{$$=new BinaryExprAST("*",dynamic_cast<ExprAST*>($1),dynamic_cast<ExprAST*>($3));}
	| multiplicative_expression '/' cast_expression		{$$=new BinaryExprAST("/",dynamic_cast<ExprAST*>($1),dynamic_cast<ExprAST*>($3));}
	| multiplicative_expression '%' cast_expression		{$$=new BinaryExprAST("%",dynamic_cast<ExprAST*>($1),dynamic_cast<ExprAST*>($3));}
	;

additive_expression
	: multiplicative_expression                         {$$=$1;}
	| additive_expression '+' multiplicative_expression {$$=new BinaryExprAST("+",dynamic_cast<ExprAST*>($1),dynamic_cast<ExprAST*>($3));}
	| additive_expression '-' multiplicative_expression {$$=new BinaryExprAST("-",dynamic_cast<ExprAST*>($1),dynamic_cast<ExprAST*>($3));}
	;

/* shift_expression
	: additive_expression
	| shift_expression LEFT_OP additive_expression
	| shift_expression RIGHT_OP additive_expression
	;

relational_expression
	: shift_expression
	| relational_expression '<' shift_expression
	| relational_expression '>' shift_expression
	| relational_expression LE_OP shift_expression
	| relational_expression GE_OP shift_expression
	;

equality_expression
	: relational_expression
	| equality_expression EQ_OP relational_expression
	| equality_expression NE_OP relational_expression
	;

and_expression
	: equality_expression
	| and_expression '&' equality_expression
	;

exclusive_or_expression
	: and_expression
	| exclusive_or_expression '^' and_expression
	;

inclusive_or_expression
	: exclusive_or_expression
	| inclusive_or_expression '|' exclusive_or_expression
	;

logical_and_expression
	: inclusive_or_expression
	| logical_and_expression AND_OP inclusive_or_expression
	;

logical_or_expression
	: logical_and_expression
	| logical_or_expression OR_OP logical_and_expression
	; 

conditional_expression
	: logical_or_expression
	| logical_or_expression '?' expression ':' conditional_expression
	; */

conditional_expression : additive_expression {$$=$1;};

assignment_expression
	: conditional_expression                                    	{$$=$1;}
	| unary_expression assignment_operator assignment_expression	{$$=new AssignAST(assignOp,dynamic_cast<VarAST*>($1),dynamic_cast<ExprAST*>($2));}
	;

assignment_operator
	: '='         								{assignOp="=";}
	| MUL_ASSIGN  								{assignOp="*";}
	| DIV_ASSIGN  								{assignOp="/";}
	| MOD_ASSIGN  								{assignOp="%";}
	| ADD_ASSIGN  								{assignOp="+";}
	| SUB_ASSIGN  								{assignOp="-";}
	/* | LEFT_ASSIGN 								{assignOp='<';}
	| RIGHT_ASSIGN								{assignOp='>';} */
	| AND_ASSIGN  								{assignOp="&";}
	| XOR_ASSIGN  								{assignOp="^";}
	| OR_ASSIGN   								{assignOp="|";}
	;

expression
	: assignment_expression               		{$$=$1;}
	| expression ',' assignment_expression		{$$=$1;}
	;

constant_expression
	: conditional_expression
	;

declaration
	: declaration_specifiers ';'                     	{}
	| declaration_specifiers init_declarator_list ';'	{$$=$2;}
	;

declaration_specifiers
	: type_specifier									{};
	/* : storage_class_specifier
	| storage_class_specifier declaration_specifiers
	| type_specifier
	| type_specifier declaration_specifiers
	| type_qualifier
	| type_qualifier declaration_specifiers
	; */

init_declarator_list
	: init_declarator                         			{$$=$1;}
	| init_declarator_list ',' init_declarator			{dynamic_cast<DecAST *>($1)->next=$2;$$=$1;}
	;

init_declarator
	: declarator                						{$$=$1;}
	| declarator '=' initializer						{$$=$1;dynamic_cast<DecAST*>($1)->init=dynamic_cast<ExprAST*>($2);}
	;


type_specifier
	: VOID
	| CHAR    											{global.buf.type='c';}
	| SHORT   											{global.buf.type='i';}
	| INT     											{global.buf.type='i';}
	| LONG    											{global.buf.type='i';}
	| FLOAT   											{global.buf.type='f';}
	| DOUBLE  											{global.buf.type='f';}
	| SIGNED  											{global.buf.type='i';}
	| UNSIGNED											{global.buf.type='u';}
	| struct_or_union_specifier							{selfDefinedType=dynamic_cast<StructAST*>($1);}
	//| enum_specifier
	//| TYPE_NAME
	;

struct_or_union_specifier
	: struct_or_union IDENTIFIER '{' struct_declaration_list '}' {$$=new StructAST(global.buf.val.u8,dynamic_cast<DecAST*>($4));}
	| struct_or_union '{' struct_declaration_list '}'            {$$=new StructAST("@tmp1",dynamic_cast<DecAST*>($3));}
	| struct_or_union IDENTIFIER                                 {$$=new StructAST(global.buf.val.u8);}
	;

struct_or_union
	: STRUCT											{global.buf.type='t';}
	/* | UNION */
	;

struct_declaration_list
	: struct_declaration                        			{$$=$1;}
	| struct_declaration_list struct_declaration			{$$=$1;dynamic_cast<DecAST*>($1)->next=$2;}
	;

struct_declaration
	: type_specifier struct_declarator_list ';'
	//: specifier_qualifier_list struct_declarator_list ';'
	;

/* specifier_qualifier_list
	: type_specifier specifier_qualifier_list
	| type_specifier
	//| type_qualifier specifier_qualifier_list
	//| type_qualifier
	; */

struct_declarator_list
	: declaration_list										{$$=$1;}
	/* : struct_declarator                           			{$$=$1;} */
	/* | struct_declarator_list ',' struct_declarator			{$$=$1;dynamic_cast<DecAST*>($1)->next=$3;} */
	;

struct_declarator
	: declarator											{$$=$1;}
	/* | ':' constant_expression
	| declarator ':' constant_expression */
	;

translation_unit
	: external_declaration                 					
	| translation_unit external_declaration					
	;

external_declaration
	: function_definition									{root.push_back($1);}
	| declaration        									{root.push_back($1);}
	;

function_definition
	: declaration_specifiers declarator declaration_list compound_statement {$$=new FunctionAST(dynamic_cast<BlockAST*>($4),$2->op);}
	| declaration_specifiers declarator compound_statement                  {$$=new FunctionAST(dynamic_cast<BlockAST*>($3),$2->op);}
	| declarator declaration_list compound_statement                        {$$=new FunctionAST(dynamic_cast<BlockAST*>($3),$1->op);}
	| declarator compound_statement                                         {$$=new FunctionAST(dynamic_cast<BlockAST*>($2),$1->op);}
	;

declarator
	: '*' declarator									{$$=$2;dynamic_cast<DecAST*>($2)->fullType.push(NULL);}
	| direct_declarator        							{$$=$1;}
	;

direct_declarator
	: IDENTIFIER                                   		{$$=new DecAST(global.buf);bindings[$$->op]=NULL;}
	| '(' declarator ')'                           		{$$=$2;}
	| direct_declarator '[' constant_expression ']'		{$$=$1;dynamic_cast<DecAST*>($1)->fullType.push(dynamic_cast<ExprAST*>($3));/*size can only be decided in runtime*/}
	| direct_declarator '[' ']'                    		{$$=$1;dynamic_cast<DecAST*>($1)->fullType.push(NULL);}
	| direct_declarator '(' parameter_type_list ')'		{$$=$1;$1->op+="()";}
	| direct_declarator '(' ')'                    		{$$=$1;$1->op+="()";}
	/* | direct_declarator '(' identifier_list ')'    		{$$=$1;} */	// looks like an error
	;

/* pointer
	: '*'
	| '*' pointer
	| '*' type_qualifier_list
	| '*' type_qualifier_list pointer
	; */



parameter_type_list
	: parameter_list
	| parameter_list ',' ELLIPSIS
	;

parameter_list
	: parameter_declaration
	| parameter_list ',' parameter_declaration
	;

parameter_declaration
	: declaration_specifiers declarator
	/* | declaration_specifiers abstract_declarator */
	| declaration_specifiers
	;

/* identifier_list
	: IDENTIFIER
	| identifier_list ',' IDENTIFIER
	; */

type_name
	: type_specifier
	//: specifier_qualifier_list
	//| specifier_qualifier_list abstract_declarator
	;


initializer
	: assignment_expression       						{$$=$1;}
	| '{' initializer_list '}'    						{$$=$2;}
	| '{' initializer_list ',' '}'						{$$=$2;}
	;

initializer_list
	: initializer                     					{$$=$1;}
	| initializer_list ',' initializer					{$$=$1;dynamic_cast<ExprAST*>($1)->next=dynamic_cast<ExprAST*>($2);}
	;

statement
	: expression_statement								{$$=$1;}
	| compound_statement								{$$=$1;};
	/* : labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	; */

labeled_statement
	: IDENTIFIER ':' statement
	| CASE constant_expression ':' statement
	| DEFAULT ':' statement
	;

compound_statement
	: '{' '}'                                 			{$$=new BlockAST(nullptr);}
	| '{' statement_list '}'                  			{$$=new BlockAST($2);}
	| '{' declaration_list '}'                			{$$=new BlockAST($2);}
	| '{' declaration_list statement_list '}' 			{$$=new BlockAST($2);dynamic_cast<DecAST *>($2)->tail()->next=$3;}
	;

declaration_list
	: declaration                 						{$$=$1;}
	| declaration_list declaration						{$$=$1;}
	;

statement_list
	: statement               							{$$=$1;}
	| statement_list statement							{dynamic_cast<StmtAST*>($1)->next=$2;$$=$1;}
	;

expression_statement
	: ';'           									{$$=new StmtAST();}
	| expression ';'									{$$=new StmtAST(dynamic_cast<ExprAST*>($1));}
	;

selection_statement
	: IF '(' expression ')' statement               	{$$=new IfAST(dynamic_cast<ExprAST*>$3,$5);}
	| IF '(' expression ')' statement ELSE statement	{$$=new IfAST(dynamic_cast<ExprAST*>$3,$5,$7);}
	| SWITCH '(' expression ')' statement           	{$$=new IfAST(dynamic_cast<ExprAST*>$3,$5);}
	;

iteration_statement
	: WHILE '(' expression ')' statement
	| DO statement WHILE '(' expression ')' ';'
	| FOR '(' expression_statement expression_statement ')' statement
	| FOR '(' expression_statement expression_statement expression ')' statement
	;

jump_statement
	: GOTO IDENTIFIER ';'
	| CONTINUE ';'
	| BREAK ';'
	| RETURN ';'
	| RETURN expression ';'
	;
/* enum_specifier
	: ENUM '{' enumerator_list '}'
	| ENUM IDENTIFIER '{' enumerator_list '}'
	| ENUM IDENTIFIER
	;

enumerator_list
	: enumerator
	| enumerator_list ',' enumerator
	;

enumerator
	: IDENTIFIER
	| IDENTIFIER '=' constant_expression
	; */

/* type_qualifier
	: CONST
	| VOLATILE
	; */
/* storage_class_specifier
	: TYPEDEF
	| EXTERN
	| STATIC
	| AUTO
	| REGISTER
	; */
/* type_qualifier_list
	: type_qualifier
	| type_qualifier_list type_qualifier
	; */
/* abstract_declarator
	: '*' abstract_declarator
	| direct_abstract_declarator
	; */

/* direct_abstract_declarator
	: '(' abstract_declarator ')'
	| '[' ']'
	| '[' constant_expression ']'
	| direct_abstract_declarator '[' ']'
	| direct_abstract_declarator '[' constant_expression ']'
	| '(' ')'
	| '(' parameter_type_list ')'
	| direct_abstract_declarator '(' ')'
	| direct_abstract_declarator '(' parameter_type_list ')'
	; */
%%
/* using namespace std;
/* extern char yytext[]; */
extern int column;

/* void yyerror(s)
char *s;
{
	fflush(stdout);
	printf("\n%*s\n%*s\n", column, "^", column, s);
} */
namespace yy {
	void rcc::error(location const &loc,const string &s){
		/* cerr<<"error at "<<loc<<": "<<s<<endl; */
		printf("error at %d: %s\n",loc,s.data());
	}
}