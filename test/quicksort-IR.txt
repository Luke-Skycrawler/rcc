@a = common global [10005 x i32] 0

declare i32 @scanf(...)

declare i32 @printf(i8*, ...)

define i32 @sort(i32 %left, i32 %right) {
"entry@sort":
  %left1 = alloca i32, align 4
  store i32 %left, i32* %left1, align 4
  %right2 = alloca i32, align 4
  store i32 %right, i32* %right2, align 4
  %0 = load i32, i32* %left1, align 4
  %i = alloca i32, align 4
  store i32 %0, i32* %i, align 4
  %1 = load i32, i32* %right2, align 4
  %j = alloca i32, align 4
  store i32 %1, i32* %j, align 4
  %2 = load i32, i32* %left1, align 4
  %3 = load i32, i32* %left1, align 4
  %4 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %3
  %5 = load i32, i32* %4, align 4
  %key = alloca i32, align 4
  store i32 %5, i32* %key, align 4
  %tmp = alloca i32, align 4
  store i32 0, i32* %tmp, align 4
  %6 = load i32, i32* %left1, align 4
  %7 = load i32, i32* %right2, align 4
  %8 = icmp sge i32 %6, %7
  %9 = zext i1 %8 to i32
  %10 = sitofp i32 %9 to double
  %ifcond = fcmp one double %10, 0.000000e+00
  br i1 %ifcond, label %then, label %else

then:                                             ; preds = %"entry@sort"
  ret i32 0
  br label %ifcont

else:                                             ; preds = %"entry@sort"
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %cond

cond:                                             ; preds = %afterloop10, %ifcont
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %j, align 4
  %13 = icmp slt i32 %11, %12
  %14 = zext i1 %13 to i32
  %whilecond = icmp eq i32 %14, 1
  br i1 %whilecond, label %loop, label %afterloop

loop:                                             ; preds = %cond
  br label %cond3

afterloop:                                        ; preds = %cond
  %15 = load i32, i32* %key, align 4
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %i, align 4
  %18 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %17
  %19 = load i32, i32* %18, align 4
  %20 = load i32, i32* %i, align 4
  %21 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %20
  store i32 %15, i32* %21, align 4
  %22 = load i32, i32* %left1, align 4
  %23 = load i32, i32* %i, align 4
  %24 = sub i32 %23, 1
  %call = call i32 @sort(i32 %22, i32 %24)
  %25 = load i32, i32* %i, align 4
  %26 = add i32 %25, 1
  %27 = load i32, i32* %right2, align 4
  %call11 = call i32 @sort(i32 %26, i32 %27)
  ret i32 0
  ret void <badref>

cond3:                                            ; preds = %loop5, %loop
  %28 = load i32, i32* %i, align 4
  %29 = load i32, i32* %j, align 4
  %30 = icmp slt i32 %28, %29
  %31 = zext i1 %30 to i32
  %32 = load i32, i32* %key, align 4
  %33 = load i32, i32* %j, align 4
  %34 = load i32, i32* %j, align 4
  %35 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp sle i32 %32, %36
  %38 = zext i1 %37 to i32
  %39 = and i32 %31, %38
  %whilecond4 = icmp eq i32 %39, 1
  br i1 %whilecond4, label %loop5, label %afterloop6

loop5:                                            ; preds = %cond3
  %40 = load i32, i32* %j, align 4
  %41 = sub i32 %40, 1
  %42 = load i32, i32* %j, align 4
  store i32 %41, i32* %j, align 4
  br label %cond3

afterloop6:                                       ; preds = %cond3
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %i, align 4
  %45 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %44
  %46 = load i32, i32* %45, align 4
  %47 = load i32, i32* %tmp, align 4
  store i32 %46, i32* %tmp, align 4
  %48 = load i32, i32* %j, align 4
  %49 = load i32, i32* %j, align 4
  %50 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %49
  %51 = load i32, i32* %50, align 4
  %52 = load i32, i32* %i, align 4
  %53 = load i32, i32* %i, align 4
  %54 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %53
  %55 = load i32, i32* %54, align 4
  %56 = load i32, i32* %i, align 4
  %57 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %56
  store i32 %51, i32* %57, align 4
  %58 = load i32, i32* %tmp, align 4
  %59 = load i32, i32* %j, align 4
  %60 = load i32, i32* %j, align 4
  %61 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %60
  %62 = load i32, i32* %61, align 4
  %63 = load i32, i32* %j, align 4
  %64 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %63
  store i32 %58, i32* %64, align 4
  br label %cond7

cond7:                                            ; preds = %loop9, %afterloop6
  %65 = load i32, i32* %i, align 4
  %66 = load i32, i32* %j, align 4
  %67 = icmp slt i32 %65, %66
  %68 = zext i1 %67 to i32
  %69 = load i32, i32* %key, align 4
  %70 = load i32, i32* %i, align 4
  %71 = load i32, i32* %i, align 4
  %72 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %71
  %73 = load i32, i32* %72, align 4
  %74 = icmp sge i32 %69, %73
  %75 = zext i1 %74 to i32
  %76 = and i32 %68, %75
  %whilecond8 = icmp eq i32 %76, 1
  br i1 %whilecond8, label %loop9, label %afterloop10

loop9:                                            ; preds = %cond7
  %77 = load i32, i32* %i, align 4
  %78 = add i32 %77, 1
  %79 = load i32, i32* %i, align 4
  store i32 %78, i32* %i, align 4
  br label %cond7

afterloop10:                                      ; preds = %cond7
  %80 = load i32, i32* %i, align 4
  %81 = load i32, i32* %i, align 4
  %82 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %81
  %83 = load i32, i32* %82, align 4
  %84 = load i32, i32* %tmp, align 4
  store i32 %83, i32* %tmp, align 4
  %85 = load i32, i32* %j, align 4
  %86 = load i32, i32* %j, align 4
  %87 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %86
  %88 = load i32, i32* %87, align 4
  %89 = load i32, i32* %i, align 4
  %90 = load i32, i32* %i, align 4
  %91 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %90
  %92 = load i32, i32* %91, align 4
  %93 = load i32, i32* %i, align 4
  %94 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %93
  store i32 %88, i32* %94, align 4
  %95 = load i32, i32* %tmp, align 4
  %96 = load i32, i32* %j, align 4
  %97 = load i32, i32* %j, align 4
  %98 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %97
  %99 = load i32, i32* %98, align 4
  %100 = load i32, i32* %j, align 4
  %101 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %100
  store i32 %95, i32* %101, align 4
  br label %cond
}

define i32 @main() {
"entry@main":
  %k = alloca i32, align 4
  store i32 0, i32* %k, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %n, align 4
  %str_addr = alloca [3 x i8], i64 mul nuw (i64 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i64), i64 3), align 1
  %tmp = getelementptr [3 x i8], [3 x i8]* %str_addr, i32 0
  store [3 x i8] c"%d\00", [3 x i8]* %tmp, align 1
  %0 = load i32, i32* %n, align 4
  %tmp1 = getelementptr i32, i32* %n, i32 0
  %call = call i32 (...) @scanf([3 x i8]* %tmp, i32* %tmp1)
  %1 = load i32, i32* %n, align 4
  %2 = sub i32 %1, 1
  %3 = icmp sgt i32 0, %2
  %enterloop_cond = icmp eq i1 %3, false
  br i1 %enterloop_cond, label %loop, label %afterloop

loop:                                             ; preds = %loop, %"entry@main"
  %k2 = phi i32 [ 0, %"entry@main" ], [ %next_variable, %loop ]
  %k3 = alloca i32, align 4
  store i32 %k2, i32* %k3, align 4
  %str_addr4 = alloca [3 x i8], i64 mul nuw (i64 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i64), i64 3), align 1
  %tmp5 = getelementptr [3 x i8], [3 x i8]* %str_addr4, i32 0
  store [3 x i8] c"%d\00", [3 x i8]* %tmp5, align 1
  %4 = load i32, i32* %k3, align 4
  %5 = load i32, i32* %k3, align 4
  %6 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %5
  %7 = load i32, i32* %6, align 4
  %8 = load i32, i32* %k3, align 4
  %9 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %8
  %tmp6 = getelementptr i32, i32* %9, i32 0
  %call7 = call i32 (...) @scanf([3 x i8]* %tmp5, i32* %tmp6)
  %10 = load i32, i32* %k3, align 4
  %next_variable = add i32 %10, 1
  %11 = icmp sgt i32 %next_variable, %2
  %continue_cond = icmp eq i1 %11, false
  br i1 %continue_cond, label %loop, label %afterloop

afterloop:                                        ; preds = %loop, %"entry@main"
  %12 = load i32, i32* %n, align 4
  %13 = sub i32 %12, 1
  %call8 = call i32 @sort(i32 0, i32 %13)
  %14 = load i32, i32* %n, align 4
  %15 = sub i32 %14, 1
  %16 = icmp sgt i32 0, %15
  %enterloop_cond11 = icmp eq i1 %16, false
  br i1 %enterloop_cond11, label %loop9, label %afterloop10

loop9:                                            ; preds = %loop9, %afterloop
  %k12 = phi i32 [ 0, %afterloop ], [ %next_variable17, %loop9 ]
  %k13 = alloca i32, align 4
  store i32 %k12, i32* %k13, align 4
  %str_addr14 = alloca [4 x i8], i64 mul nuw (i64 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i64), i64 4), align 1
  %tmp15 = getelementptr [4 x i8], [4 x i8]* %str_addr14, i32 0
  store [4 x i8] c"%d\0A\00", [4 x i8]* %tmp15, align 1
  %17 = load i32, i32* %k13, align 4
  %18 = load i32, i32* %k13, align 4
  %19 = getelementptr [10005 x i32], [10005 x i32]* @a, i32 0, i32 %18
  %20 = load i32, i32* %19, align 4
  %call16 = call i32 (i8*, ...) @printf([4 x i8]* %tmp15, i32 %20)
  %21 = load i32, i32* %k13, align 4
  %next_variable17 = add i32 %21, 1
  %22 = icmp sgt i32 %next_variable17, %15
  %continue_cond18 = icmp eq i1 %22, false
  br i1 %continue_cond18, label %loop9, label %afterloop10

afterloop10:                                      ; preds = %loop9, %afterloop
  ret i32 0
  ret void <badref>
}