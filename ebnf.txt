# Program
A simplified program formatt. Should be refined with function declaration.
---
<program> ::= {<external-declaration>}*
<external-declaration> ::= <function-definition>
                        | <declaration>



# Declaration
Function declaration should be added.
---
<declaration> ::=  <declaration_specifier> <init_declarator_list> ;
<declaration_specifier> ::= <type_specifier>
<init_declarator_list> ::= <init_declarator>
                        | <init_declarator_list> , <init_declarator>
<init_declarator> ::= <declarator>
                    | <declarator> = <initializer>
<declarator> ::= <direct_declarator>

<direct_declarator> ::= <identifier>
                        | <declarator> [ <constant> ])
<initializer> ::= <assign_expr>
                | { <initializer_list> }
                | { <initializer_list> , }
<initializer_list> ::= <initializer>
                     | <initializer_list> , <initializer>
<function-definition> ::= {<declaration-specifier>}* <declarator> {<declaration>}* <compound-statement>




# Statement
More statement types should be added.
---
<compound_statement> ::= { {<declaration>}* {<statement>}* }
<statement> ::= <expr_statement>
              | <compound_statement>
<expr_statement> ::= {<expr>}? ;



# Type
Struct and more types should be added.
---
<type_specifier> ::= char
                   | int
                   | double



# Expression
<expr> ::= <assign_expr>
        | <expr> , <assign_expr>

<assign_expr> ::= <cond_expr>
                | <unary_expr> <assign_op> <assign_expr>

<assign_op>::= =
            | *=
            | /=
            | %=
            | +=
            | -=
            | <<=
            | >>=
            | &=
            | ^=
            | |=

<cond_expr> ::= <logical_or_exprn>
            | <logical_or_expr> ? <expr> : <cond_expr>

<logical_or_expr> ::= <logical_and_expr>
                    | <logical_or_expr> || <logical_and_expr>

<logical_and_expr> ::= <inclusive_or_expr>
                    | <logical_and_expr> && <inclusive_or_expr>

<inclusive_or_expr> ::= <exclusive_or_expr>
                    | <inclusive_or_expr> | <exclusive_or_expr>

<exclusive_or_expr> ::= <and_expr>
                    | <exclusive_or_expr> ^ <and_expr>

<and_expr> ::= <equality_expr>
            | <and_expr> & <equality_expr>

<equality_expr> ::= <relational_expr>
                | <equality_expr> == <relational_expr>
                | <equality_expr> != <relational_expr>

<relational_expr> ::= <shift_expr>
                    | <relational_expr> < <shift_expr>
                    | <relational_expr> > <shift_expr>
                    | <relational_expr> <= <shift_expr>
                    | <relational_expr> >= <shift_expr>

<shift_expr> ::= <additive_expr>
            | <shift_expr> << <additive_expr>
            | <shift_expr> >> <additive_expr>

<additive_expr> ::= <multiplicative_expr>
                | <additive_expr> + <multiplicative_expr>
                | <additive_expr> - <multiplicative_expr>

<multiplicative_expr> ::= <cast_expr>
                    | <multiplicative_expr> * <cast_expr>
                    | <multiplicative_expr> / <cast_expr>
                    | <multiplicative_expr> % <cast_expr>

<cast_expr> ::= <unary_expr>
            | ( <type_specifier> ) <cast_expr>

<unary_expr> ::= <postfix_expr>
            | ++ <unary_expr>
            | -- <unary_expr>
            | <unary_op> <cast_expr>
            | sizeof <unary_expr>
            | sizeof <type_name>

<unary_op> ::= &
            | *
            | +
            | -
            | ~
            | !

<postfix_expr> ::= <primary_expr>
                | <postfix_expr> [ <expr> ]
                | <postfix_expr> ( {<assign_expr>}* )
                | <postfix_expr> . <identifier>
                | <postfix_expr> -> <identifier>
                | <postfix_expr> ++
                | <postfix_expr> --

<primary_expr> ::= <identifier>
                | <constant>
                | <string>
                | ( <expr> )

<constant> ::= <int_constant>
            | <char_constant>
            | <double_constant>
